// compile : /usr/bin/g++ ex.cpp -o ex
#include <iostream>
#include <vector>
#include <cmath>
#include <cstring>
#pragma warning(disable : 4996)
#define ll long long
#define MOD 1000

using namespace std;

struct matrix
{
	ll m[2][2];
};

ll arr[101], inputa, inputb, n;
vector<matrix> v;

int main() {
    scanf("%lld %lld %lld", &inputa, &inputb, &n);

	matrix init;
	init.m[0][0] = inputa;
	init.m[0][1] = inputb;
	init.m[1][0] = 1;
	init.m[1][1] = inputa;
	v.push_back(init);
	for (ll i = 1; i <= 70; i++) {
		matrix m1 = v[i - 1], m2;
		m2.m[0][0] = ((m1.m[0][0] * m1.m[0][0]) % MOD + (m1.m[0][1] * m1.m[1][0]) % MOD) % MOD;
		m2.m[0][1] = ((m1.m[0][0] * m1.m[0][1]) % MOD + (m1.m[0][1] * m1.m[1][1]) % MOD) % MOD;
		m2.m[1][0] = ((m1.m[1][0] * m1.m[0][0]) % MOD + (m1.m[1][1] * m1.m[1][0]) % MOD) % MOD;
		m2.m[1][1] = ((m1.m[1][0] * m1.m[0][1]) % MOD + (m1.m[1][1] * m1.m[1][1]) % MOD) % MOD;
		v.push_back(m2);
	}

    memset(arr, 0, sizeof(arr));
    for (ll i = 0; i <= 70; i++) {
        arr[i] = n % 2;
        n /= 2;
    }
    ll res[2] = { 1, 0 };

    for (ll i = 0; i <= 70; i++) {
        if (!arr[i]) continue;

        ll a = ((res[0] * v[i].m[0][0]) % MOD + (res[1] * v[i].m[0][1]) % MOD) % MOD;
        ll b = ((res[0] * v[i].m[1][0]) % MOD + (res[1] * v[i].m[1][1]) % MOD) % MOD;
        res[0] = a, res[1] = b;
        while (res[0] < 0) res[0] += MOD;
        while (res[1] < 0) res[1] += MOD;
    }
    printf("%03lld\n", (res[0] * 2 - 1 + MOD) % MOD);
}