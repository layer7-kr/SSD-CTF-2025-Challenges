from pwn import *
from capstone import *

def sub(n):
    for i in range(len(s)):
        s[i] -= n
        s[i] &= 0xff

def xor(n):
    for i in range(len(s)):
        s[i] ^= n

e = ELF('./main', checksec = False)

strings = e.read(0x9004, 0x5460).split(b'\x00')[:-1]
strings = [s.decode() for s in strings][::-1]

s = [207, 188, 245, 232, 151, 198, 207, 246, 75, 106, 245, 199, 75, 232, 225, 188, 75, 154, 216, 51, 49, 49, 72, 121, 151, 207, 225, 180, 246, 198, 198, 151, 219, 198, 75, 154, 207, 246, 232, 199]

for f in strings:
    md = Cs(CS_ARCH_X86, CS_MODE_64)
    
    elf = ELF(f, checksec = False)
    func_addr = elf.symbols['func']
    func_size = elf.functions['func'].size
    func_code = elf.read(func_addr, func_size)
    
    xor_cnt = 0
    for i in md.disasm(func_code, func_addr):
        # print(f"0x{i.address:x}:\t{i.mnemonic}\t{i.op_str}")
        if i.mnemonic == 'lea' and i.op_str.startswith('ecx, [rax'):
            sub(int(i.op_str[10:11] + i.op_str[12:-1], 16))
            break
        if i.mnemonic == 'xor' and i.op_str.startswith('eax,'):
            xor_cnt += 1
            if xor_cnt < 2: continue
            xor(int(i.op_str[5:], 16) & 0xff)
            break

print(''.join([chr(c) for c in s]))
