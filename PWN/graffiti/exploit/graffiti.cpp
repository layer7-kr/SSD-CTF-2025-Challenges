// g++ -o graffiti graffiti.cpp -no-pie
#include <iostream>
#include <vector>
#include <unistd.h>
#include <cstdio>
#include <cstdlib>
#include <cstring>  // memcpy를 위해 추가

void print_logo()
{
    setbuf(stdout, 0);
    setbuf(stdin, 0);
    puts("   _____             __  __ _  ");
    puts("  / ____|           / _|/ _(_) ");
    puts(" | |  __  __ _ _ __| |_| |_ _  ");
    puts(" | | |_ |/ _` | '__|  _|  _| | ");
    puts(" | |__| | (_| | |  | | | | | | ");
    puts("  \\_____|\\__,_|_|  |_| |_| |_| ");
    puts("                               ");
    puts("                               ");
}

void menu()
{
    puts("1. normal spray");
    puts("2. red spray");
    puts("3. blue spray");
    puts("4. run");
    printf("> ");
}

void win() {
    system("/bin/sh");
}

class Spray {
public:
    Spray()
    {
        printf("graffiti > ");
        read(0, label, 0x200);
    }
    
    // 복사 생성자 추가 (깊은 복사)
    Spray(const Spray& other) {
        memcpy(label, other.label, sizeof(label));
    }
    
    char label[0x200];
    virtual void spray() const {
        std::cout << label;
    }
    virtual ~Spray() {}
};

class RedSpray : public Spray {
public:
    RedSpray() : Spray() {}
    
    // 복사 생성자 추가
    RedSpray(const RedSpray& other) : Spray(other) {}
    
    void spray() const override {
        std::cout << "\033[31m" << label << "\033[0m";
    }
};

class BlueSpray : public Spray {
public:
    BlueSpray() : Spray() {}
    
    // 복사 생성자 추가
    BlueSpray(const BlueSpray& other) : Spray(other) {}
    
    void spray() const override {
        std::cout << "\033[34m" << label << "\033[0m";
    }
};

int main()
{
    int flag = 0;
    std::vector<Spray*> bucket;
    print_logo();
    std::cout << "I need more spray to finish my graffiti!" << std::endl;

    while (1)
    {
        menu();
        int sel, many = 0;
        scanf("%d", &sel);
        getchar();

        if (sel == 1)
        {
            printf("how many? ");
            scanf("%d", &many);
            getchar();

            // 첫 번째 객체 생성
            Spray* original = new Spray();
            bucket.push_back(original);
            
            // 나머지는 깊은 복사로 생성
            for (int i = 1; i < many; i++) {
                Spray* copy = new Spray(*original);  // 복사 생성자 사용
                bucket.push_back(copy);
            }
        }
        else if (sel == 2)
        {
            printf("how many? ");
            scanf("%d", &many);
            getchar();

            // 첫 번째 객체 생성
            RedSpray* original = new RedSpray();
            bucket.push_back(original);
            
            // 나머지는 깊은 복사로 생성
            for (int i = 1; i < many; i++) {
                RedSpray* copy = new RedSpray(*original);
                bucket.push_back(copy);
            }
        }
        else if (sel == 3)
        {
            printf("how many? ");
            scanf("%d", &many);
            getchar();

            // 첫 번째 객체 생성
            BlueSpray* original = new BlueSpray();
            bucket.push_back(original);
            
            // 나머지는 깊은 복사로 생성
            for (int i = 1; i < many; i++) {
                BlueSpray* copy = new BlueSpray(*original);
                bucket.push_back(copy);
            }
        }
        else if (sel == 4)
        {
            break;
        }
        else if (sel == 1337 && flag == 0)
        {
            puts("Re-labeling");
            int idx;
            scanf("%d", &idx);
            getchar();
            read(0, bucket[idx]->label, 2566);  // 버퍼 오버플로우 취약점은 유지
            flag = 1;
        }
    }

    puts("Now it's time for show!");
    for (auto& spray : bucket)
        spray->spray();

    // 메모리 정리
    for (auto& spray : bucket)
        delete spray;

    return 0;
}